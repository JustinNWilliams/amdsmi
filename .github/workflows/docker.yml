name: Test Docker Containers for Multiple OS Versions
  
on:  
  push:  
  
jobs:  
  test-docker-run-deb:  
    name: Test Docker Run on Debian-based Systems  
    runs-on: [self-hosted, Linux, X64, dev, ubuntu20.04]  
    strategy:  
      matrix:  
        include:  
          - os: ubuntu20 
            docker_image: "compute-artifactory.amd.com:5000/rocm-base-images/ubuntu-20.04-bld:2024091101"  
          - os: ubuntu22  
            docker_image: "compute-artifactory.amd.com:5000/rocm-base-images/ubuntu-22.04-bld:2024091101"  
          - os: ubuntu24  
            docker_image: "compute-artifactory.amd.com:5000/rocm-base-images/ubuntu-24.04-bld:2024091101"  
  
    steps:  
      - name: Test Docker Container on ${{ matrix.os }}  
        run: |  
         echo "Testing Docker container for ${{ matrix.os }}"  
         docker run --rm -t --privileged --volume "${{ github.workspace }}:/src:rw" "${{ matrix.docker_image }}" /bin/bash -c "set -e && cd /src && echo 'Inside Docker Container on ${{ matrix.os }}' && apt-get update && apt-get install -y wget gnupg2 cmake make g++ python3-argcomplete pkg-config git sudo software-properties-common && wget -qO - http://repo.radeon.com/rocm/rocm.gpg.key | apt-key add - && echo 'deb [arch=amd64] http://repo.radeon.com/rocm/apt/debian/ \$(lsb_release -cs) main' > /etc/apt/sources.list.d/rocm.list && apt-get update && apt-get install -y rocm-cmake rocm-device-libs rocm-utils rocminfo && BUILD_FOLDER=/src/build && DEB_BUILD='amd-smi-lib*99999-local_amd64.deb' && rm -rf \${BUILD_FOLDER} && mkdir -p \${BUILD_FOLDER} && cd \${BUILD_FOLDER} && cmake .. -DBUILD_TESTS=OFF -DENABLE_ESMI_LIB=OFF && make -j \$(nproc) && make package && sudo apt install -y \${BUILD_FOLDER}/\${DEB_BUILD} && sudo ln -s /opt/rocm/bin/amd-smi /usr/local/bin && amd-smi --help || true && echo 'Build and installation completed for ${{ matrix.os }}.'"  
  
  test-docker-run-rpm:  
    name: Test Docker Run on RPM-based Systems  
    runs-on: [self-hosted, Linux, X64, dev, ubuntu20.04]  
    strategy:  
      matrix:  
        include:  
          - os: sles  
            docker_image: "compute-artifactory.amd.com:5000/rocm-base-images/sles-15.5:2024091101"  
          - os: rhel8  
            docker_image: "compute-artifactory.amd.com:5000/rocm-base-images/rhel-8.x-bld:2024110601"  
          - os: rhel9  
            docker_image: "compute-artifactory.amd.com:5000/rocm-base-images/rhel-9.x-bld:2024101501"  
          - os: mariner2  
            docker_image: "compute-artifactory.amd.com:5000/rocm-base-images/mariner-2.0:2024101501"  
          - os: azurelinux3  
            docker_image: "compute-artifactory.amd.com:5000/rocm-base-images/azurelinux-3:2024100701"  
  
    steps:  
      - name: Test Docker Container on ${{ matrix.os }}  
        run: |  
          echo "Testing Docker container for ${{ matrix.os }}"    
          docker run "${{ matrix.docker_image }}" /bin/bash -c 'echo "Hello from inside the ${{ matrix.os }} container!"'
