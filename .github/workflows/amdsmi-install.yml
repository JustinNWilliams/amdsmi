name: Build and Install amdsmi for Multiple OS Versions  
  
on:  
  push:  
  
jobs:  
  build-and-install-deb:  
    name: Build and Install on Debian-based Systems  
    runs-on: [self-hosted, Linux, X64, dev, ubuntu20.04]  
    strategy:  
      matrix:  
        os:  
          - ubuntu20  
          - ubuntu22  
          - ubuntu24  
        include:  
          - os: ubuntu20  
            docker_image: "compute-artifactory.amd.com:5000/rocm-base-images/ubuntu-20.04-bld:2024091101"  
            build_tests: OFF  
            enable_esmi_lib: OFF  
          - os: ubuntu22  
            docker_image: "compute-artifactory.amd.com:5000/rocm-base-images/ubuntu-22.04-bld:2024091101"  
            build_tests: OFF  
            enable_esmi_lib: OFF  
          - os: ubuntu24  
            docker_image: "compute-artifactory.amd.com:5000/rocm-base-images/ubuntu-24.04-bld:2024091101"  
            build_tests: OFF  
            enable_esmi_lib: OFF  
  
    steps:  
      - name: Checkout Repository  
        uses: actions/checkout@v3  
  
      - name: Build and Install on ${{ matrix.os }}  
        run: |  
          docker run --rm -t --privileged --volume "${{ github.workspace }}:/src:rw" "${{ matrix.docker_image }}" /bin/bash -c " set -e cd /src echo 'Inside Docker Container on ${{ matrix.os }}'  
  
              # Build AMD-SMI  
              BUILD_FOLDER=/src/build  
              DEB_BUILD='amd-smi-lib*99999-local_amd64.deb'  
              DEB_BUILD_TEST='amd-smi-lib-tests*99999-local_amd64.deb'  
  
              rm -rf \$BUILD_FOLDER && \  
              mkdir -p \$BUILD_FOLDER && \  
              cd \$BUILD_FOLDER && \  
              cmake .. -DBUILD_TESTS=OFF -DENABLE_ESMI_LIB=OFF && \  
              make -j \$(nproc) && \  
              make package  
  
              # Install AMD-SMI  
              sudo ls && \  
              sudo apt install -y \$BUILD_FOLDER/\$DEB_BUILD && \  
              sudo ln -s /opt/rocm/bin/amd-smi /usr/local/bin && \  
              cd -  
  
              # Check If Installed  
              python3 -m pip list | grep amd && \  
              python3 -m pip list | grep pip && \  
              python3 -m pip list | grep setuptools  
            "  

      
  # build-and-install-rpm:  
  #   name: Build and Install on RPM-based Systems  
  #   runs-on: [self-hosted, Linux, X64, dev, ubuntu20.04]  
  #   strategy:  
  #     matrix:  
  #       include:  
  #         - os: sles  
  #           docker_image: "compute-artifactory.amd.com:5000/rocm-base-images/sles-15.5:2024091101"  
  #           package_manager: zypper 
  #           build_tests: OFF  
  #           enable_esmi_lib: OFF  
  #         - os: rhel8  
  #           docker_image: "compute-artifactory.amd.com:5000/rocm-base-images/rhel-8.x-bld:2024110601"  
  #           package_manager: dnf  
  #           build_tests: ON  
  #           enable_esmi_lib: OFF  
  #         - os: rhel9  
  #           docker_image: "compute-artifactory.amd.com:5000/rocm-base-images/rhel-9.x-bld:2024101501"  
  #           package_manager: dnf  
  #           build_tests: ON  
  #           enable_esmi_lib: OFF  
  #         - os: mariner2  
  #           docker_image: "compute-artifactory.amd.com:5000/rocm-base-images/mariner-2.0:2024101501"  
  #           package_manager: tdnf  
  #           build_tests: ON  
  #           enable_esmi_lib: OFF  
  #         - os: azurelinux3  
  #           docker_image: "compute-artifactory.amd.com:5000/rocm-base-images/azurelinux-3:2024100701"  
  #           package_manager: dnf  
  #           build_tests: ON  
  #           enable_esmi_lib: OFF  
  
  #   steps:  
  #     - name: Checkout Repository  
  #       uses: actions/checkout@v3  
  
  #     - name: Build and Install on ${{ matrix.os }}  
  #       run: |
  #         docker run --rm -ti --privileged --volume $(realpath ./):/src:rw compute-artifactory.amd.com:5000/rocm-base-images/ubuntu-20.04-bld:2024090301  
  #             set -e  
  #             cd /src  