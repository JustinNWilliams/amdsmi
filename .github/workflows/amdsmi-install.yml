name: Build and Install amdsmi for Multiple OS Versions  
  
on:  
  push:  
  
jobs:  
  build-and-install-deb:  
    name: Build and Install on Debian-based Systems  
    runs-on: [self-hosted, Linux, X64, dev, ubuntu20.04]  
    strategy:  
      matrix:  
        os:  
          - ubuntu20  
          - ubuntu22  
          - ubuntu24  
        include:  
          - os: ubuntu20  
            docker_image: compute-artifactory.amd.com:5000/rocm-base-images/ubuntu-20.04-bld:2024091101  
            build_tests: OFF  
            enable_esmi_lib: OFF  
          - os: ubuntu22  
            docker_image: compute-artifactory.amd.com:5000/rocm-base-images/ubuntu-22.04-bld:2024091101  
            build_tests: OFF  
            enable_esmi_lib: OFF  
          - os: ubuntu24  
            docker_image: compute-artifactory.amd.com:5000/rocm-base-images/ubuntu-24.04-bld:2024091101  
            build_tests: OFF  
            enable_esmi_lib: OFF  
  
    steps:  
      - name: Checkout Repository  
        uses: actions/checkout@v3  
        
      - name: Build and Install on ${{ matrix.os }}  
        env:  
          BUILD_FOLDER: /src/build  
          DEB_BUILD: "amd-smi-lib*99999-local_amd64.deb"  
        run: |  
          docker run --rm -t --privileged \  
            --volume "${{ github.workspace }}:/src:rw" \  
            -e BUILD_FOLDER \  
            -e DEB_BUILD \  
            -w /src \  
            ${{ matrix.docker_image }} \  
            /bin/bash -c "  
              set -e  
              shopt -s expand_aliases  
  
              export BUILD_FOLDER=/src/build  
              export DEB_BUILD='amd-smi-lib*99999-local_amd64.deb'  
              export DEB_BUILD_TEST='amd-smi-lib-tests*99999-local_amd64.deb'  
  
              echo 'Building on OS: ${{ matrix.os }}'  
  
              # Install dependencies  
              apt-get update  
              apt-get install -y wget gnupg2 cmake make g++ python3-argcomplete pkg-config git sudo software-properties-common  
              wget -qO - http://repo.radeon.com/rocm/rocm.gpg.key | apt-key add -  
              echo 'deb [arch=amd64] http://repo.radeon.com/rocm/apt/debian/ $(lsb_release -cs) main' > /etc/apt/sources.list.d/rocm.list  
              apt-get update  
              apt-get install -y rocm-cmake rocm-device-libs rocm-utils rocminfo  
  
              # Define aliases  
              alias amdsmi_build='rm -rf \${BUILD_FOLDER} && \  
                                  mkdir -p \${BUILD_FOLDER} && \  
                                  cd \${BUILD_FOLDER} && \  
                                  cmake .. -DBUILD_TESTS=${{ matrix.build_tests }} -DENABLE_ESMI_LIB=${{ matrix.enable_esmi_lib }} && \  
                                  make -j \$(nproc) && \  
                                  make package'  
  
              alias amdsmi_install_package_deb='sudo apt install -y \${BUILD_FOLDER}/\${DEB_BUILD} && \  
                                                sudo ln -s /opt/rocm/bin/amd-smi /usr/local/bin && \  
                                                cd -'  
  
              # Build and Install  
              amdsmi_build  
              amdsmi_install_package_deb  
  
              # Verify installation  
              python3 -m pip list | grep amd || true  
              python3 -m pip list | grep pip || true  
              python3 -m pip list | grep setuptools || true  
  
              echo 'Build and installation completed for ${{ matrix.os }}.'  
            "  
  
  build-and-install-rpm:  
    name: Build and Install on RPM-based Systems  
    runs-on: [self-hosted, Linux, X64, dev, ubuntu20.04]  
    strategy:  
      matrix:  
        include:  
          - os: sles  
            docker_image: compute-artifactory.amd.com:5000/rocm-base-images/sles-15.5:2024091101  
            package_manager: zypper  
            build_tests: OFF  
            enable_esmi_lib: OFF  
          - os: rhel8  
            docker_image: compute-artifactory.amd.com:5000/rocm-base-images/rhel-8.x-bld:2024110601  
            package_manager: dnf  
            build_tests: ON  
            enable_esmi_lib: OFF  
          - os: rhel9  
            docker_image: compute-artifactory.amd.com:5000/rocm-base-images/rhel-9.x-bld:2024101501  
            package_manager: dnf  
            build_tests: ON  
            enable_esmi_lib: OFF  
          - os: mariner2  
            docker_image: compute-artifactory.amd.com:5000/rocm-base-images/mariner-2.0:2024101501  
            package_manager: tdnf  
            build_tests: ON  
            enable_esmi_lib: OFF  
          - os: azurelinux3  
            docker_image: compute-artifactory.amd.com:5000/rocm-base-images/azurelinux-3:2024100701  
            package_manager: dnf  
            build_tests: ON  
            enable_esmi_lib: OFF  
  
    steps:  
      - name: Checkout Repository  
        uses: actions/checkout@v3  
  
      - name: Build and Install on ${{ matrix.os }}  
        env:  
          BUILD_FOLDER: /src/build  
          RPM_BUILD: "amd-smi-lib*99999-local*.x86_64.rpm"  
        run: |  
          docker run --rm -t --privileged \  
            --volume "${{ github.workspace }}:/src:rw" \  
            -e BUILD_FOLDER \  
            -e RPM_BUILD \  
            -w /src \  
            ${{ matrix.docker_image }} \  
            /bin/bash -c "  
              set -e  
              shopt -s expand_aliases  
  
              export BUILD_FOLDER=/src/build  
              export RPM_BUILD='amd-smi-lib*99999-local*.x86_64.rpm'  
              export RPM_BUILD_TEST='amd-smi-lib-tests*99999-local.x86_64.rpm'  
  
              echo 'Building on OS: ${{ matrix.os }}'  
